const quiz =[
    {
        question: "what does trolling mean? ü§î",
        options: ["A) A Fun Game üé≤","B) Telling Silly Stories üìë", "C) Saying Mean Thingsü•∫", "D) A New App üì±"],
        correct: "C"
    },
    {
        question: "If Someone sends a scary message what do you do? ‚ö†",
        options: ["A) Hide it üò£","B) Talk back üó£Ô∏è", "C) Take Picture And Tell A Grown-Up üì∏", "D) Throw it away üóë"],
        correct : "C"
    },
    {
        question: "What is a best way to handle cyberbullying ? üëæ",
        options: ["A) Report block and ignore üòè","B) Bully them back üëäüèΩ","C) Delete your account üò≠","D) Ask them to stop nicely ü§ó"],
        correct: "A"
    },
    {
        question:"What should you do if a cyberbully apologizes to you? üòÆ‚Äçüí®",
        options:["A) Accept it but stay cautious ‚ö†", "B)Start being mean to them üò°", "C) Never forgive them üòæ", "D) Ignore them forever ü´∏üèª"],
        correct: "A"
    },
    {
        question:"You accidently hurt someone's feeling online what should you do? üò•",
        options:["A) ignore it üòÆ", "B) Apologize and learn from it üôÖüèº‚Äç‚ôÇÔ∏è", "C) Block them  üö´ ","D) Make fun of them more ü§£"],
        correct: "B"

    },
    {
      question: "Why is it important to report cyberbullying? üëæ",
      options: ["A) It helps stop bullying and protect others üë´", "B) It fun to report people ü§™ ","D) It makes you look like a hero ü´§ ","D) It doesn't matter ü•∫"],
      correct: "A"
    },
    {
        question:"What is the golden rule of online behaviour? ‚ö†Ô∏è",
        options:["A) Treat others how you want to be treated ü§ù"," B) Say whatever you want ü§ì ", "C) Ignore online safety rule ü§ûüèº","D) Only be nice to people you know üëø"],
        correct:"A"

    },
    {
        question:"If a friend tell you they are being bullied online what should you do? üò∂ ",
        options:["A) Tell them to ignore it üò≤","B) Support them and report it ü´Ç","C) join in the bullying ü§ù","D) laugh it off  üòú"],
        correct:"B"
    },
    {
        question:"What does it mean to block someone? ü´∑üèø",
        options:["A) Remove them from your friendlist üìú","B) Let them see your past but not comment üëÄ"," C) Report them to police üëÆüèæ‚Äç‚ôÇÔ∏è","D) Send them a warning message ‚ö†"],
        correct:"A"
    },
    {
        question:"What is a digital footprint? üë£",
        options:["A) The tail of information you leave online üë£", "B) The size of your computer screen üñ• ", "C) A way to track cyberbullies üëæ", "D) A gaming term  üïπ"],
        correct:"A"  
    }    
];



const quizContainer = document.getElementById('quiz-container');
const questionText = document.getElementById('question-text');
const optionsContainer = document.getElementById('options');
const feedbackElement = document.getElementById('feedback');
const scoreElement = document.getElementById('score');
const nextButton = document.getElementById('nextBtn');
const dogImage = document.getElementById('dog');

let currentQuestionIndex = 0;
let score = 0;
let animationInterval;

function loadQuestion() {
    const currentQuestion = quiz[currentQuestionIndex];
    questionText.textContent = currentQuestion.question;
    optionsContainer.innerHTML = '';

    currentQuestion.options.forEach((option, index) => {
        const button = document.createElement('button');
        button.textContent = option;
        button.classList.add('option');
        button.addEventListener('click', () => checkAnswer(index));
        optionsContainer.appendChild(button);
    });

    nextButton.style.display = 'none';
    feedbackElement.textContent = '';
    resetDogPosition();
    clearInterval(animationInterval);
}

function checkAnswer(selectedIndex) {
    const currentQuestion = quiz[currentQuestionIndex];
    const correctIndex = ['A', 'B', 'C', 'D'].indexOf(currentQuestion.correct);

    const options = optionsContainer.children;
    for (let i = 0; i < options.length; i++) {
        options[i].disabled = true;
        if (i === correctIndex) {
            options[i].classList.add('correct');
        } else if (i === selectedIndex) {
            options[i].classList.add('incorrect');
        }
    }

    if (selectedIndex === correctIndex) {
        score++;
        feedbackElement.textContent = "Correct! üéâ";
        animateDog('jump');
    } else {
        feedbackElement.textContent = "Oops! That's not correct. üòï";
        animateDog('nod');
    }

    scoreElement.textContent = `Stars: ${'‚≠ê'.repeat(score)}`;
    nextButton.style.display = 'block';
}

function animateDog(action) {
    let frame = 0;
    const frameCount = 5;
    clearInterval(animationInterval);
    
    animationInterval = setInterval(() => {
        if (action === 'jump') {
            dogImage.style.transform = `translateY(${-Math.sin(frame / frameCount * Math.PI) * 10}px)`;
        } else if (action === 'nod') {
            dogImage.style.transform = `rotate(${Math.sin(frame / frameCount * Math.PI) * 5}deg)`;
        }
        
        frame++;
        if (frame >= frameCount * 2) {
            clearInterval(animationInterval);
            resetDogPosition();
        }
    }, 100);
}

function resetDogPosition() {
    dogImage.style.transform = 'translateY(0) rotate(0)';
}

function nextQuestion() {
    clearInterval(animationInterval);
    resetDogPosition();
    currentQuestionIndex++;
    if (currentQuestionIndex < quiz.length) {
        loadQuestion();
    } else {
        endQuiz();
    }
}

function endQuiz() {
    clearInterval(animationInterval);
    quizContainer.innerHTML = `
        <h1>Quiz Completed! üéä</h1>
        <p>Your final score: ${score} out of ${quiz.length}</p>
        <p>Stars earned: ${'‚≠ê'.repeat(score)}</p>
        <button onclick="location.reload()">Play Again</button>
    `;
}

nextButton.addEventListener('click', nextQuestion);

// Start the quiz
loadQuestion();
